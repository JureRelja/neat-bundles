{"version":3,"sources":["../../src/bundle-builders/bundle-builder.repository.ts"],"sourcesContent":["import db from \"@db\";\nimport { Injectable } from \"@nestjs/common\";\nimport { CreateBundleBuilderDto } from \"./dto/create-bundle-builder.dto\";\nimport { UpdateBundleBuilderDto } from \"./dto/update-bundle-builder.dto\";\nimport { BundleBuilderAndStepsBasicDto } from \"./dto/bundle-builder-basic.dto\";\nimport { BundleBuilderEntity } from \"./entities/bundle-builder.entity\";\n\n@Injectable()\nexport class BundleBuilderRepository {\n    public async create(createBundleBuilderDto: CreateBundleBuilderDto): Promise<BundleBuilderEntity> {\n        const bundleBuilder: BundleBuilderEntity = await db.bundleBuilder.create({\n            data: {\n                user: {\n                    connect: {\n                        shop: createBundleBuilderDto.shop,\n                    },\n                },\n                title: createBundleBuilderDto.title,\n                published: true,\n                shopifyProductId: createBundleBuilderDto.title,\n                bundleBuilderConfig: {\n                    create: {\n                        skipTheCart: false,\n                        allowBackNavigation: true,\n                        showOutOfStockProducts: false,\n                    },\n                },\n            },\n        });\n\n        return bundleBuilder;\n    }\n\n    public async delete(id: number): Promise<BundleBuilderEntity | null> {\n        return await db.bundleBuilder.update({\n            where: {\n                id: id,\n            },\n            data: {},\n        });\n    }\n\n    public async get(id: number, shop: string): Promise<BundleBuilderEntity | null> {\n        return db.bundleBuilder.findUnique({\n            where: {\n                id: id,\n                shop: shop,\n            },\n        });\n    }\n\n    async getWithSteps(id: number, shop: string): Promise<BundleBuilderAndStepsBasicDto | null> {\n        return db.bundleBuilder.findUnique({\n            where: {\n                id: id,\n                shop: shop,\n            },\n            select: {\n                id: true,\n                shopifyProductId: true,\n                discountType: true,\n                discountValue: true,\n                shop: true,\n                title: true,\n                published: true,\n                createdAt: true,\n                pricing: true,\n                priceAmount: true,\n                bundleBuilderSteps: {\n                    select: {\n                        id: true,\n                        title: true,\n                        stepNumber: true,\n                        stepType: true,\n                        description: true,\n                    },\n                },\n            },\n        });\n    }\n\n    public async getAll(shop: string): Promise<BundleBuilderEntity[]> {\n        return await db.bundleBuilder.findMany({\n            where: {\n                shop: shop,\n            },\n        });\n    }\n\n    public async update(updateBundleBuilderDto: UpdateBundleBuilderDto): Promise<BundleBuilderEntity> {\n        return await db.bundleBuilder.update({\n            where: {\n                id: updateBundleBuilderDto.id,\n            },\n            data: updateBundleBuilderDto,\n        });\n    }\n\n    public async getCount(shop: string): Promise<number> {\n        return db.bundleBuilder.count({\n            where: {\n                shop: shop,\n            },\n        });\n    }\n}\n"],"names":["BundleBuilderRepository","create","createBundleBuilderDto","bundleBuilder","db","data","user","connect","shop","title","published","shopifyProductId","bundleBuilderConfig","skipTheCart","allowBackNavigation","showOutOfStockProducts","delete","id","update","where","get","findUnique","getWithSteps","select","discountType","discountValue","createdAt","pricing","priceAmount","bundleBuilderSteps","stepNumber","stepType","description","getAll","findMany","updateBundleBuilderDto","getCount","count"],"mappings":";;;;+BAQaA;;;eAAAA;;;2DARE;wBACY;;;;;;;;;;;;AAOpB,IAAA,AAAMA,0BAAN,MAAMA;IACT,MAAaC,OAAOC,sBAA8C,EAAgC;QAC9F,MAAMC,gBAAqC,MAAMC,WAAE,CAACD,aAAa,CAACF,MAAM,CAAC;YACrEI,MAAM;gBACFC,MAAM;oBACFC,SAAS;wBACLC,MAAMN,uBAAuBM,IAAI;oBACrC;gBACJ;gBACAC,OAAOP,uBAAuBO,KAAK;gBACnCC,WAAW;gBACXC,kBAAkBT,uBAAuBO,KAAK;gBAC9CG,qBAAqB;oBACjBX,QAAQ;wBACJY,aAAa;wBACbC,qBAAqB;wBACrBC,wBAAwB;oBAC5B;gBACJ;YACJ;QACJ;QAEA,OAAOZ;IACX;IAEA,MAAaa,OAAOC,EAAU,EAAuC;QACjE,OAAO,MAAMb,WAAE,CAACD,aAAa,CAACe,MAAM,CAAC;YACjCC,OAAO;gBACHF,IAAIA;YACR;YACAZ,MAAM,CAAC;QACX;IACJ;IAEA,MAAae,IAAIH,EAAU,EAAET,IAAY,EAAuC;QAC5E,OAAOJ,WAAE,CAACD,aAAa,CAACkB,UAAU,CAAC;YAC/BF,OAAO;gBACHF,IAAIA;gBACJT,MAAMA;YACV;QACJ;IACJ;IAEA,MAAMc,aAAaL,EAAU,EAAET,IAAY,EAAiD;QACxF,OAAOJ,WAAE,CAACD,aAAa,CAACkB,UAAU,CAAC;YAC/BF,OAAO;gBACHF,IAAIA;gBACJT,MAAMA;YACV;YACAe,QAAQ;gBACJN,IAAI;gBACJN,kBAAkB;gBAClBa,cAAc;gBACdC,eAAe;gBACfjB,MAAM;gBACNC,OAAO;gBACPC,WAAW;gBACXgB,WAAW;gBACXC,SAAS;gBACTC,aAAa;gBACbC,oBAAoB;oBAChBN,QAAQ;wBACJN,IAAI;wBACJR,OAAO;wBACPqB,YAAY;wBACZC,UAAU;wBACVC,aAAa;oBACjB;gBACJ;YACJ;QACJ;IACJ;IAEA,MAAaC,OAAOzB,IAAY,EAAkC;QAC9D,OAAO,MAAMJ,WAAE,CAACD,aAAa,CAAC+B,QAAQ,CAAC;YACnCf,OAAO;gBACHX,MAAMA;YACV;QACJ;IACJ;IAEA,MAAaU,OAAOiB,sBAA8C,EAAgC;QAC9F,OAAO,MAAM/B,WAAE,CAACD,aAAa,CAACe,MAAM,CAAC;YACjCC,OAAO;gBACHF,IAAIkB,uBAAuBlB,EAAE;YACjC;YACAZ,MAAM8B;QACV;IACJ;IAEA,MAAaC,SAAS5B,IAAY,EAAmB;QACjD,OAAOJ,WAAE,CAACD,aAAa,CAACkC,KAAK,CAAC;YAC1BlB,OAAO;gBACHX,MAAMA;YACV;QACJ;IACJ;AACJ"}