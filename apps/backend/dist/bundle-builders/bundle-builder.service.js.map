{"version":3,"sources":["../../src/bundle-builders/bundle-builder.service.ts"],"sourcesContent":["import { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { CreateBundleBuilderDto } from \"./dto/create-bundle-builder.dto\";\nimport { UpdateBundleBuilderDto } from \"./dto/update-bundle-builder.dto\";\nimport { BundleBuilderRepository } from \"./bundle-builder.repository\";\nimport { BundleBuilderEntity } from \"./entities/bundle-builder.entity\";\nimport { BundleBuilderAndStepsBasicDto } from \"./dto/bundle-builder-basic.dto\";\n\n@Injectable()\nexport class BundleBuilderService {\n    constructor(private readonly bundleBuilderRepository: BundleBuilderRepository) {}\n\n    create(createBundleBuilderDto: CreateBundleBuilderDto): Promise<BundleBuilderEntity> {\n        try {\n            return this.bundleBuilderRepository.create(createBundleBuilderDto);\n        } catch (error) {\n            throw new BadRequestException(\"There was an error with your request. BundleBuilder not created.\");\n        }\n    }\n\n    async findAll(shop: string): Promise<BundleBuilderEntity[]> {\n        try {\n            const bundleBuilders = await this.bundleBuilderRepository.getAll(shop);\n            return bundleBuilders;\n        } catch (error) {\n            throw new BadRequestException(\"There was an error with your request. BundleBuilders not found.\");\n        }\n    }\n\n    async findOne(id: number, shop: string, includeSteps: boolean): Promise<BundleBuilderEntity | BundleBuilderAndStepsBasicDto> {\n        try {\n            let bundleBuilder: BundleBuilderEntity | BundleBuilderAndStepsBasicDto | null = null;\n\n            if (includeSteps) {\n                bundleBuilder = await this.bundleBuilderRepository.getWithSteps(id, shop);\n            } else {\n                bundleBuilder = await this.bundleBuilderRepository.get(id, shop);\n            }\n\n            if (!bundleBuilder) {\n                throw new BadRequestException(\"BundleBuilder not found.\");\n            }\n\n            return bundleBuilder;\n        } catch (error) {\n            throw new BadRequestException(\"There was an error with your request. BundleBuilder not found.\");\n        }\n    }\n\n    update(id: number, updateBundleBuilderDto: UpdateBundleBuilderDto) {\n        return `This action updates a #${id} bundleBuilder`;\n    }\n\n    remove(id: number) {\n        return `This action removes a #${id} bundleBuilder`;\n    }\n}\n"],"names":["BundleBuilderService","create","createBundleBuilderDto","bundleBuilderRepository","error","BadRequestException","findAll","shop","bundleBuilders","getAll","findOne","id","includeSteps","bundleBuilder","getWithSteps","get","update","updateBundleBuilderDto","remove","constructor"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARmC;yCAGR;;;;;;;;;;AAKjC,IAAA,AAAMA,uBAAN,MAAMA;IAGTC,OAAOC,sBAA8C,EAAgC;QACjF,IAAI;YACA,OAAO,IAAI,CAACC,uBAAuB,CAACF,MAAM,CAACC;QAC/C,EAAE,OAAOE,OAAO;YACZ,MAAM,IAAIC,2BAAmB,CAAC;QAClC;IACJ;IAEA,MAAMC,QAAQC,IAAY,EAAkC;QACxD,IAAI;YACA,MAAMC,iBAAiB,MAAM,IAAI,CAACL,uBAAuB,CAACM,MAAM,CAACF;YACjE,OAAOC;QACX,EAAE,OAAOJ,OAAO;YACZ,MAAM,IAAIC,2BAAmB,CAAC;QAClC;IACJ;IAEA,MAAMK,QAAQC,EAAU,EAAEJ,IAAY,EAAEK,YAAqB,EAAgE;QACzH,IAAI;YACA,IAAIC,gBAA4E;YAEhF,IAAID,cAAc;gBACdC,gBAAgB,MAAM,IAAI,CAACV,uBAAuB,CAACW,YAAY,CAACH,IAAIJ;YACxE,OAAO;gBACHM,gBAAgB,MAAM,IAAI,CAACV,uBAAuB,CAACY,GAAG,CAACJ,IAAIJ;YAC/D;YAEA,IAAI,CAACM,eAAe;gBAChB,MAAM,IAAIR,2BAAmB,CAAC;YAClC;YAEA,OAAOQ;QACX,EAAE,OAAOT,OAAO;YACZ,MAAM,IAAIC,2BAAmB,CAAC;QAClC;IACJ;IAEAW,OAAOL,EAAU,EAAEM,sBAA8C,EAAE;QAC/D,OAAO,CAAC,uBAAuB,EAAEN,GAAG,cAAc,CAAC;IACvD;IAEAO,OAAOP,EAAU,EAAE;QACf,OAAO,CAAC,uBAAuB,EAAEA,GAAG,cAAc,CAAC;IACvD;IA7CAQ,YAAY,AAAiBhB,uBAAgD,CAAE;aAAlDA,0BAAAA;IAAmD;AA8CpF"}