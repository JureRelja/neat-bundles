{"version":3,"sources":["../../src/cache/cache.service.ts"],"sourcesContent":["import { redisClient } from \"./cache.server\";\nimport { Request } from \"express\";\nimport hash from \"object-hash\";\nimport { CacheData } from \"./dto/cache-data.dto\";\n\nexport class CacheService {\n    public async readCache(key: string): Promise<CacheData | null> {\n        const data = await redisClient.get(key);\n\n        if (data) {\n            return JSON.parse(data);\n        }\n        return null;\n    }\n\n    public async writeCache(key: string, data: unknown): Promise<void> {\n        const dataForCache = JSON.stringify(data);\n\n        try {\n            await redisClient.set(key, dataForCache);\n            redisClient.expire(key, 60 * 60 * 24); // 24 hours\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    public async singleKeyDelete(key: string): Promise<void> {\n        await redisClient.del(key);\n    }\n\n    public async multiKeyDelete(keys: string[]): Promise<void> {\n        if (keys.length > 0) {\n            await redisClient.del(keys);\n        }\n    }\n\n    public reqToKey(req: Request): string {\n        const url = new URL(`${process.env.SHOPIFY_APP_URL as string}${req.originalUrl}`);\n\n        const searchParams = url.searchParams;\n\n        searchParams.delete(\"signature\");\n        searchParams.delete(\"timestamp\");\n\n        const reqDataToHash = {\n            query: searchParams.toString(),\n            body: req.body,\n        };\n\n        // `${req.path}@...` to make it easier to find\n        // keys on a Redis client\n        return `${req.path}@${hash.sha1(reqDataToHash)}`;\n    }\n}\n"],"names":["CacheService","readCache","key","data","redisClient","get","JSON","parse","writeCache","dataForCache","stringify","set","expire","error","console","singleKeyDelete","del","multiKeyDelete","keys","length","reqToKey","req","url","URL","process","env","SHOPIFY_APP_URL","originalUrl","searchParams","delete","reqDataToHash","query","toString","body","path","hash","sha1"],"mappings":";;;;+BAKaA;;;eAAAA;;;6BALe;mEAEX;;;;;;AAGV,IAAA,AAAMA,eAAN,MAAMA;IACT,MAAaC,UAAUC,GAAW,EAA6B;QAC3D,MAAMC,OAAO,MAAMC,wBAAW,CAACC,GAAG,CAACH;QAEnC,IAAIC,MAAM;YACN,OAAOG,KAAKC,KAAK,CAACJ;QACtB;QACA,OAAO;IACX;IAEA,MAAaK,WAAWN,GAAW,EAAEC,IAAa,EAAiB;QAC/D,MAAMM,eAAeH,KAAKI,SAAS,CAACP;QAEpC,IAAI;YACA,MAAMC,wBAAW,CAACO,GAAG,CAACT,KAAKO;YAC3BL,wBAAW,CAACQ,MAAM,CAACV,KAAK,KAAK,KAAK,KAAK,WAAW;QACtD,EAAE,OAAOW,OAAO;YACZC,QAAQD,KAAK,CAACA;QAClB;IACJ;IAEA,MAAaE,gBAAgBb,GAAW,EAAiB;QACrD,MAAME,wBAAW,CAACY,GAAG,CAACd;IAC1B;IAEA,MAAae,eAAeC,IAAc,EAAiB;QACvD,IAAIA,KAAKC,MAAM,GAAG,GAAG;YACjB,MAAMf,wBAAW,CAACY,GAAG,CAACE;QAC1B;IACJ;IAEOE,SAASC,GAAY,EAAU;QAClC,MAAMC,MAAM,IAAIC,IAAI,GAAGC,QAAQC,GAAG,CAACC,eAAe,GAAaL,IAAIM,WAAW,EAAE;QAEhF,MAAMC,eAAeN,IAAIM,YAAY;QAErCA,aAAaC,MAAM,CAAC;QACpBD,aAAaC,MAAM,CAAC;QAEpB,MAAMC,gBAAgB;YAClBC,OAAOH,aAAaI,QAAQ;YAC5BC,MAAMZ,IAAIY,IAAI;QAClB;QAEA,8CAA8C;QAC9C,yBAAyB;QACzB,OAAO,GAAGZ,IAAIa,IAAI,CAAC,CAAC,EAAEC,mBAAI,CAACC,IAAI,CAACN,gBAAgB;IACpD;AACJ"}