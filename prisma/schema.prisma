// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean
  locale        String?
  collaborator  Boolean
  emailVerified Boolean
}

enum PricingPlan {
  NONE
  FREE
  BASIC
  PRO
}

//Admin user
model User {
  id                       Int             @id @default(autoincrement())
  hasAppInstalled          Boolean         @default(true)
  activeBillingPlan        PricingPlan     @default(NONE)
  isDevelopmentStore       Boolean         @default(false)
  completedInstallation    Boolean         @default(false)
  completedOnboarding      Boolean         @default(false)
  showTutorialBanner       Boolean         @default(true)
  ownerName                String          @default("")
  storeName                String
  storeUrl                 String          @unique
  primaryDomain            String //https://{domain} format
  email                    String
  onlineStorePublicationId String //GraphQL GID format
  bundleBuilders           BundleBuilder[]
  globalSettings           GlobalSettings?
}

//BundleBuilder
model BundleBuilder {
  id                      Int                @id @default(autoincrement())
  deleted                 Boolean            @default(false)
  shopifyProductId        String             @unique //GraphQL GID format
  shopifyPageId           String             @unique //Normal BigInt number, but stored as a string for easier manipulation
  title                   String
  published               Boolean            @default(false)
  createdAt               DateTime           @default(now())
  steps                   BundleStep[]
  pricing                 BundlePricing
  priceAmount             Float?
  discountType            BundleDiscountType
  discountValue           Float
  bundleSettings          BundleSettings?
  bundleBuilderPageHandle String
  storeUrl                String
  user                    User               @relation(fields: [storeUrl], references: [storeUrl], onDelete: Cascade)
  createdBundles          CreatedBundle[]
}

//BundleBuilder step
model BundleStep {
  id              Int            @id @default(autoincrement())
  bundleBuilderId Int
  bundleBuilder   BundleBuilder  @relation(fields: [bundleBuilderId], references: [id], onDelete: Cascade)
  stepNumber      Int
  title           String
  description     String
  stepType        StepType
  productInput    ProductInput? //Data if the step is of type PRODUCT
  contentInputs   ContentInput[] //Data if the step is of type CONTENT
}

//Step type
enum StepType {
  PRODUCT
  CONTENT
}

// PRODUCT step input
model ProductInput {
  id                     Int        @id @default(autoincrement())
  bundleStepId           Int        @unique
  bundleStep             BundleStep @relation(fields: [bundleStepId], references: [id], onDelete: Cascade)
  products               Product[]
  minProductsOnStep      Int //Minimum number of products that must be selected on this step
  maxProductsOnStep      Int //Maximum number of products that can be selected on this step
  allowProductDuplicates Boolean
  showProductPrice       Boolean
}

//Individual shopify product
model Product {
  shopifyProductId     String         @id //GraphQL GID format
  productInput         ProductInput[]
  shopifyProductHandle String
}

//CONTENT step input
model ContentInput {
  id           Int        @id @default(autoincrement())
  bundleStepId Int
  bundleStep   BundleStep @relation(fields: [bundleStepId], references: [id], onDelete: Cascade)
  inputType    InputType
  inputLabel   String
  maxChars     Int
  required     Boolean
}

// Content input type
enum InputType {
  TEXT
  IMAGE
  NUMBER
  NONE
}

//Bundle builder settings
model BundleSettings {
  id                     Int           @id @default(autoincrement())
  bundleBuilder          BundleBuilder @relation(fields: [bundleBuilderId], references: [id], onDelete: Cascade)
  bundleBuilderId        Int           @unique
  skipTheCart            Boolean
  allowBackNavigation    Boolean
  showOutOfStockProducts Boolean
}

//Fixed pricing means the bundle price is fixed (e.g. $100 no mater what products are choosen) and calculated pricing means that the total price is the sum of the prices of the products in the bundle
enum BundlePricing {
  FIXED
  CALCULATED
}

enum BundleDiscountType {
  FIXED
  PERCENTAGE
  NO_DISCOUNT
}

model GlobalSettings {
  id                        Int                @id @default(autoincrement())
  user                      User               @relation(fields: [storeUrl], references: [storeUrl], onDelete: Cascade)
  storeUrl                  String             @unique
  //Desktop settings
  stepNavigationTypeDesktop StepNavigationType @default(NORMAL)

  //Mobile settings
  stepNavigationTypeMobile StepNavigationType @default(STICKY)

  bundleColors BundleColors?
  bundleLabels BundleLabels?
}

enum StepNavigationType {
  STICKY
  NORMAL
}

// Global colors
model BundleColors {
  id                    Int            @id @default(autoincrement())
  globalSettings        GlobalSettings @relation(fields: [globalSettingsId], references: [id], onDelete: Cascade)
  globalSettingsId      Int            @unique
  stepsIcon             String
  addToBundleBtn        String
  addToBundleText       String
  nextStepBtn           String
  nextStepBtnText       String
  titleAndDESC          String
  viewProductBtn        String
  viewProductBtnText    String
  removeProductsBtn     String
  removeProductsBtnText String
  prevStepBtn           String
  prevStepBtnText       String
}

// Global labels used accross all bundle builders
model BundleLabels {
  id               Int            @id @default(autoincrement())
  globalSettings   GlobalSettings @relation(fields: [globalSettingsId], references: [id], onDelete: Cascade)
  globalSettingsId Int            @unique
  addToBundleBtn   String
  nextStepBtn      String
  prevStepBtn      String
  viewProductBtn   String
}

//Bundle created using BundleBuilder
model CreatedBundle {
  id                   Int                   @id @default(autoincrement())
  bundleBuilderId      Int
  bundleBuilder        BundleBuilder         @relation(fields: [bundleBuilderId], references: [id], onDelete: Cascade)
  isVariantSold        Boolean               @default(false)
  addedProductVariants AddedProductVariant[] //List of variants in GraphQL GID format
  addedContent         AddedContent[]
  finalPrice           Float
  discountAmount       Float //Discount amount is the same currency as final total price
  createdAt            DateTime              @default(now())
}

//Individual product variants that were aded to created bundles
model AddedProductVariant {
  id              Int           @id @default(autoincrement())
  productVariant  String //GraphQL GID format
  quantity        Int
  createdBundle   CreatedBundle @relation(fields: [createdBundleId], references: [id], onDelete: Cascade)
  createdBundleId Int
}

//Individual content inputs that were entered for created bundles
model AddedContent {
  id              Int           @id @default(autoincrement())
  contentType     InputType
  contentValue    String
  createdBundle   CreatedBundle @relation(fields: [createdBundleId], references: [id], onDelete: Cascade)
  createdBundleId Int
}
