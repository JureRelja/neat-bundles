generator client {
  provider = "prisma-client-js"
}

// generator prismaClassGenerator {
//   provider      = "prisma-class-generator"
//   output        = "./generatedPrismaClasses"
//   dryRun        = false
//   makeIndexFile = false
//   useSwagger    = false
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

//
model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  collaborator  Boolean
  email         String?
  emailVerified Boolean
  firstName     String?
  lastName      String?
  locale        String?
  accountOwner  Boolean
}

model User {
  id                    Int             @id @default(autoincrement())
  ownerName             String          @default("")
  email                 String
  shop                  String          @unique
  storeName             String
  primaryDomain         String
  hasAppInstalled       Boolean         @default(true)
  activeBillingPlan     PricingPlan     @default(NONE)
  showTutorialBanner    Boolean         @default(true)
  completedOnboarding   Boolean         @default(false)
  isDevelopmentStore    Boolean         @default(false)
  storefrontAccessToken String?
  bundleBuilders        BundleBuilder[]
  createdBundles        CreatedBundle[]
  settings              Settings?
}

model BundleBuilder {
  id                  Int                  @id @default(autoincrement())
  shopifyProductId    String               @unique
  title               String
  published           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  pricing             BundlePricing        @default(CALCULATED)
  bundleBuilderPageUrl String
  priceAmount         Float?
  discountType        BundleDiscountType   @default(NO_DISCOUNT)
  discountValue       Float?
  shop                String
  user                User                 @relation(fields: [shop], references: [shop], onDelete: Cascade)
  bundleBuilderConfig BundleBuilderConfig?
  bundleBuilderSteps  BundleBuilderStep[]
}

enum BundlePricing {
  FIXED
  CALCULATED
}

enum BundleDiscountType {
  FIXED
  PERCENTAGE
  NO_DISCOUNT
}

model AddedContent {
  id              Int           @id @default(autoincrement())
  contentType     InputType
  contentValue    String
  createdBundleId Int
  createdBundle   CreatedBundle @relation(fields: [createdBundleId], references: [id], onDelete: Cascade)
}

model AddedProductVariant {
  id              Int           @id @default(autoincrement())
  productVariant  String
  quantity        Int
  createdBundleId Int
  createdBundle   CreatedBundle @relation(fields: [createdBundleId], references: [id], onDelete: Cascade)
}

model BundleColors {
  id                    Int      @id @default(autoincrement())
  stepsIcon             String
  addToBundleBtn        String
  addToBundleText       String
  nextStepBtn           String
  nextStepBtnText       String
  titleAndDESC          String
  viewProductBtn        String
  removeProductsBtn     String
  prevStepBtn           String
  prevStepBtnText       String
  removeProductsBtnText String
  viewProductBtnText    String
  settingsId            Int      @unique
  settings              Settings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
}

model BundleLabels {
  id             Int      @id @default(autoincrement())
  addToBundleBtn String
  nextStepBtn    String
  prevStepBtn    String
  viewProductBtn String
  settingsId     Int      @unique
  settings       Settings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
}

model BundleBuilderConfig {
  id                     Int           @id @default(autoincrement())
  skipTheCart            Boolean
  allowBackNavigation    Boolean
  showOutOfStockProducts Boolean
  bundleBuilderId        Int           @unique
  bundleBuilder          BundleBuilder @relation(fields: [bundleBuilderId], references: [id], onDelete: Cascade)
}

model BundleBuilderStep {
  id              Int            @id @default(autoincrement())
  stepNumber      Int
  title           String
  stepType        StepType
  description     String
  bundleBuilderId Int
  bundleBuilder   BundleBuilder  @relation(fields: [bundleBuilderId], references: [id], onDelete: Cascade)
  contentInput    ContentInput[]
  productInput    ProductInput?
}

model ContentInput {
  id           Int               @id @default(autoincrement())
  bundleStepId Int
  inputType    InputType
  inputLabel   String
  maxChars     Int
  required     Boolean
  bundleStep   BundleBuilderStep @relation(fields: [bundleStepId], references: [id], onDelete: Cascade)
}

model CreatedBundle {
  id                  Int                   @id @default(autoincrement())
  bundleBuilderId     Int?
  finalPrice          Float
  discountAmount      Float
  createdAt           DateTime              @default(now())
  isSold              Boolean               @default(false)
  addedContent        AddedContent[]
  addedProductVariant AddedProductVariant[]
  shop                String
  user                User                  @relation(fields: [shop], references: [shop], onDelete: Cascade)
}

model Settings {
  id                        Int                @id @default(autoincrement())
  shop                      String             @unique
  stepNavigationTypeDesktop StepNavigationType @default(NORMAL)
  stepNavigationTypeMobile  StepNavigationType @default(STICKY)
  BundleColors              BundleColors?
  BundleLabels              BundleLabels?
  user                      User               @relation(fields: [shop], references: [shop], onDelete: Cascade)
}

model Product {
  shopifyProductId     String         @id
  shopifyProductHandle String
  ProductInput         ProductInput[]
}

model ProductInput {
  id                     Int               @id @default(autoincrement())
  bundleStepId           Int               @unique
  minProductsOnStep      Int
  maxProductsOnStep      Int
  allowProductDuplicates Boolean
  showProductPrice       Boolean
  BundleStep             BundleBuilderStep @relation(fields: [bundleStepId], references: [id], onDelete: Cascade)
  Product                Product[]
}

enum InputType {
  TEXT
  IMAGE
  NUMBER
  NONE
}

enum PricingPlan {
  BASIC
  PRO
  NONE
  FREE
}

enum StepNavigationType {
  STICKY
  NORMAL
}

enum StepType {
  PRODUCT
  CONTENT
}
